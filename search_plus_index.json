{"./":{"url":"./","title":"Introduction","keywords":"","body":"Specification The document formatting Chinese Copywriting Guidelines (github.com). The open-source license MIT License (mit-license.org). The implementation of the MODBUS protocol library MODBUS Application Protocol 1.1b. The configuration file CMSIS Configuration Wizard Annotations. Copyright &yono 2024 all right reservedÔºåpowered by GitbookDate of revision: 2024-11-20 07:06:49 "},"overview/ÁâπÊÄß.html":{"url":"overview/ÁâπÊÄß.html","title":"Library Features","keywords":"","body":"Library Features ‚ö° Non-blocking: Uses library ticks to prevent blocking. ü™∂ Thread-free: A single tick drives the entire master-slave chain, allowing for periodic execution of ticks in any manner. üå† No interrupt usage: Free port binding allows for arbitrary management of data flow. üí™ Multi-master and multi-slave: Any master or slave is an independent object, allowing for the activation of any number of masters and slaves in the program. üóΩ Arbitrary mapping of register address tables to memory addresses: A key feature of this library, solving the mapping relationship between Modbus virtual addresses and actual variables, making development simpler and more flexible. The entire library usage revolves around this mapping table, and future maintenance will only require updates to the mapping table. ‚öñÔ∏è Different address mapping lookup times should not exceed 500 clock cycles: It is difficult to claim this has been fully achieved. Since Modbus has a maximum of 0xFFFF virtual addresses, a binary search method is used, but this is still not flexible enough. A better table lookup structure will be sought in the future (perhaps). This is a challenge for library upgrades; if you have any solutions, please contact me. Thank you very much! üòò üèÉ‚Äç‚ôÄÔ∏è Restrained event callbacks: A minimal number of callback mechanisms. Stack polling is used as much as possible to minimize the impact on system timing. Copyright &yono 2024 all right reservedÔºåpowered by GitbookDate of revision: 2024-11-20 07:06:49 "},"top/ÈÄöÁî®Â∏∏Áî®API.html":{"url":"top/ÈÄöÁî®Â∏∏Áî®API.html","title":"Commonly Used APIs","keywords":"","body":"Commonly Used APIs MBx_Ticks Copyright &yono 2024 all right reservedÔºåpowered by GitbookDate of revision: 2024-11-20 07:06:49 "},"apidoc/apigengric/MBx_Ticks.html":{"url":"apidoc/apigengric/MBx_Ticks.html","title":"MBx_Ticks","keywords":"","body":"MBx_Ticks void MBx_Ticks( uint32_t Cycle ); This function must be called periodically and is a key function that drives the modbusX system. Both the master and slave are driven by this unique library tick. Parameters CycleÔºöThe period value in microseconds (us) for calling this function. Return Value No return value. Copyright &yono 2024 all right reservedÔºåpowered by GitbookDate of revision: 2024-11-20 07:06:49 "},"top/‰ªéÊú∫Â∏∏Áî®API.html":{"url":"top/‰ªéÊú∫Â∏∏Áî®API.html","title":"Slave Used APIs","keywords":"","body":"Slave Used APIs MBx_Slave_RTU_Init MBx_Slave_TCP_Init Copyright &yono 2024 all right reservedÔºåpowered by GitbookDate of revision: 2024-11-20 07:06:49 "},"apidoc/apislave/MBx_Slave_RTU_Init.html":{"url":"apidoc/apislave/MBx_Slave_RTU_Init.html","title":"MBx_Slave_RTU_Init","keywords":"","body":"MBx_Slave_RTU_Init uint32_t MBx_Slave_RTU_Init(_MBX_SLAVE *MBxSlave, uint8_t SlaveID, const _MBX_MAP_LIST_ENTRY *MAP, MBX_SEND_PTR MBxSend, MBX_GTEC_PTR MBxGetc, uint32_t BaudRate, uint8_t *RxBuffer, uint32_t RxBufferSize, uint8_t *TxBuffer, uint32_t TxBufferSize ); Initialize the MBX slave object for RTU and pass various configuration parameters to initialize this _MBX_SLAVE type slave object. Parameters MBxSlave: Pointer to the slave object to be initialized. SlaveID: The slave ID to be configured for this slave object, in the range of 1 to 247. MAP: A pointer to a list ending with the MBX_MAP_LIST_END macro, defining all possible addresses. MBxSend: A function pointer for the data sending port. MBxGetc: A function pointer for the data receiving port. BaudRate: The baud rate of the actual serial link, used to automatically calculate the time for 1.5 characters and 3.5 characters. RxBuffer: Pointer to a memory space for storing received data. RxBufferSize: Total length of the memory space for storing received data. This memory space determines the maximum length of a single request that can be parsed. TxBuffer: Pointer to a memory space for storing data to be sent. TxBufferSize: Total length of the memory space for storing data to be sent. This memory space determines the maximum length of a single response that can be sent. Return Value MBX_API_RETURN_DEFAULT(0x00): Normal return. MBX_API_RETURN_MAP_UNFORMAT(0x101): The provided MAP table is not properly formatted. Copyright &yono 2024 all right reservedÔºåpowered by GitbookDate of revision: 2024-11-20 07:06:49 "},"apidoc/apislave/MBx_Slave_TCP_Init.html":{"url":"apidoc/apislave/MBx_Slave_TCP_Init.html","title":"MBx_Slave_TCP_Init","keywords":"","body":"MBx_Slave_TCP_Init uint32_t MBx_Slave_TCP_Init(_MBX_SLAVE *MBxSlave, uint8_t SlaveID, const _MBX_MAP_LIST_ENTRY *MAP, MBX_SEND_PTR MBxSend, MBX_GTEC_PTR MBxGetc, uint8_t *RxBuffer, uint32_t RxBufferSize, uint8_t *TxBuffer, uint32_t TxBufferSize ); Initialize the MBX slave object for TCP and pass various configuration parameters to initialize this _MBX_SLAVE type slave object. Parameters MBxSlave: Pointer to the slave object to be initialized. SlaveID: The slave ID to be configured for this slave object, in the range of 1 to 247. MAP: A pointer to a list ending with the MBX_MAP_LIST_END macro, defining all possible addresses. MBxSend: A function pointer for the data sending port. MBxGetc: A function pointer for the data receiving port. RxBuffer: Pointer to a memory space for storing received data. RxBufferSize: Total length of the memory space for storing received data. This memory space determines the maximum length of a single request that can be parsed. TxBuffer: Pointer to a memory space for storing data to be sent. TxBufferSize: Total length of the memory space for storing data to be sent. This memory space determines the maximum length of a single response that can be sent. Return Value MBX_API_RETURN_DEFAULT(0x00): Normal return. MBX_API_RETURN_MAP_UNFORMAT(0x101): The provided MAP table is not properly formatted. Copyright &yono 2024 all right reservedÔºåpowered by GitbookDate of revision: 2024-11-20 07:06:49 "},"top/‰∏ªÊú∫Â∏∏Áî®API.html":{"url":"top/‰∏ªÊú∫Â∏∏Áî®API.html","title":"Master Used APIs","keywords":"","body":"Master Used APIs MBx_Master_RTU_Init MBx_Master_Member_Add MBx_Master_Error_Get API Series for Initiating Requests to Slave Copyright &yono 2024 all right reservedÔºåpowered by GitbookDate of revision: 2024-11-20 07:06:49 "},"apidoc/apimaster/MBx_Master_RTU_Init.html":{"url":"apidoc/apimaster/MBx_Master_RTU_Init.html","title":"MBx_Master_RTU_Init","keywords":"","body":"MBx_Master_RTU_Init uint32_t MBx_Master_RTU_Init(_MBX_MASTER *MBxMaster, MBX_SEND_PTR MBxSend, MBX_GTEC_PTR MBxGetc, uint32_t BaudRate, uint8_t *RxBuffer, uint32_t RxBufferSize, uint8_t *TxBuffer, uint32_t TxBufferSize ); Initialize the MBX master object for RTU and pass various configuration parameters to initialize this _MBX_MASTER type master object. Parameters MBxMaster: Pointer to the master object to be initialized. MBxSend: A function pointer for the data sending port. MBxGetc: A function pointer for the data receiving port. BaudRate: The baud rate of the actual serial link, used to automatically calculate the time for 1.5 characters and 3.5 characters. RxBuffer: Pointer to a memory space for storing received data. RxBufferSize: Total length of the memory space for storing received data. This memory space determines the maximum length of a single slave response that can be parsed. TxBuffer: Pointer to a memory space for storing data to be sent. TxBufferSize: Total length of the memory space for storing data to be sent. This memory space determines the maximum length of a single master request that can be sent. Return Value MBX_API_RETURN_DEFAULT(0x00): Normal return. MBX_API_RETURN_ERR_PARAM(0x02): Parameter error, check the parameters passed during the call. Copyright &yono 2024 all right reservedÔºåpowered by GitbookDate of revision: 2024-11-20 07:06:49 "},"apidoc/apimaster/MBx_Master_Member_Add.html":{"url":"apidoc/apimaster/MBx_Master_Member_Add.html","title":"MBx_Master_Member_Add","keywords":"","body":"MBx_Master_Member_Add uint32_t MBx_Master_Member_Add(_MBX_MASTER *MBxMaster, _MBX_MASTER_TEAM_MEMBER *MBxMember, uint8_t SlaveID, const _MBX_MAP_LIST_ENTRY *MAP ); Add a member slave to the MBX master object. Parameters MBxMaster: Pointer to the MBX master object to which the member is expected to be added. MBxMember: Pointer to the slave member object that is expected to be configured and added. SlaveID: The slave ID to be configured for the member. MAP: A pointer to a list ending with the MBX_MAP_LIST_END macro, defining all possible addresses to be configured for the member. Return Value MBX_API_RETURN_DEFAULT(0x00): Normal return. MBX_API_RETURN_ERR_PARAM(0x02): Parameter error, check the parameters passed during the call. MBX_API_RETURN_MAP_UNFORMAT(0x101): The provided MAP table is not properly formatted. Copyright &yono 2024 all right reservedÔºåpowered by GitbookDate of revision: 2024-11-20 07:06:49 "},"apidoc/apimaster/MBx_Master_Error_Get.html":{"url":"apidoc/apimaster/MBx_Master_Error_Get.html","title":"MBx_Master_Error_Get","keywords":"","body":"MBx_Master_Error_Get uint32_t MBx_Master_Error_Get(_MBX_MASTER *pMaster, uint8_t *Func, uint8_t *Error, uint16_t *AddrStart, uint16_t *RegNum ); Get an error from the MBX master error queue. This error corresponds to the error code received from the slave. Parameters pMaster: Pointer to the MBX master object that is expected to be operated on. Func: The function code of the error instruction sent. Error: The actual error code received. AddrStart: The starting address operated on by the error instruction sent. RegNum: The number of registers operated on by the error instruction sent. Return Value MBX_API_RETURN_DEFAULT(0x00): Normal return. MBX_API_RETURN_BUFFER_EMPTY(0x21): Queue is empty. Copyright &yono 2024 all right reservedÔºåpowered by GitbookDate of revision: 2024-11-20 07:06:49 "},"apidoc/apimaster/Master2Slave.html":{"url":"apidoc/apimaster/Master2Slave.html","title":"API Series for Initiating Requests to Slave","keywords":"","body":"API Series for Initiating Requests to Slave MBx_Master_Read_Coil_Request uint32_t MBx_Master_Read_Coil_Request(_MBX_MASTER *pMaster, uint8_t SlaveID, uint16_t StartAddr, uint16_t ReadNum); The MBX master issues a read coil request. Parameters pMaster: Pointer to the MBX master object that is expected to issue the request. SlaveID: The ID of the slave to be requested. StartAddr: The starting address for reading. ReadNum: The number of coils to read. Return Value MBX_API_RETURN_DEFAULT(0x00): Normal return. MBX_API_RETURN_BUFFER_FULL(0x20): Queue is full. MBX_API_RETURN_MAP_UNFIND(0x102): Suitable MAP not found, usually means the slave ID is incorrect or the requested address is not defined in the address mapping table. MBx_Master_Read_Disc_Input_Request uint32_t MBx_Master_Read_Disc_Input_Request(_MBX_MASTER *pMaster, uint8_t SlaveID, uint16_t StartAddr, uint16_t ReadNum); The MBX master issues a read discrete input request. Parameters pMaster: Pointer to the MBX master object that is expected to issue the request. SlaveID: The ID of the slave to be requested. StartAddr: The starting address for reading. ReadNum: The number of coils to read. Return Value MBX_API_RETURN_DEFAULT(0x00): Normal return. MBX_API_RETURN_BUFFER_FULL(0x20): Queue is full. MBX_API_RETURN_MAP_UNFIND(0x102): Suitable MAP not found, usually means the slave ID is incorrect or the requested address is not defined in the address mapping table. MBx_Master_Read_Reg_Request uint32_t MBx_Master_Read_Reg_Request(_MBX_MASTER *pMaster, uint8_t SlaveID, uint16_t StartAddr, uint16_t ReadNum); The MBX master issues a read holding register request. Parameters pMaster: Pointer to the MBX master object that is expected to issue the request. SlaveID: The ID of the slave to be requested. StartAddr: The starting address for reading. ReadNum: The number of coils to read. Return Value MBX_API_RETURN_DEFAULT(0x00): Normal return. MBX_API_RETURN_BUFFER_FULL(0x20): Queue is full. MBX_API_RETURN_MAP_UNFIND(0x102): Suitable MAP not found, usually means the slave ID is incorrect or the requested address is not defined in the address mapping table. MBx_Master_Read_Input_Reg_Request uint32_t MBx_Master_Read_Input_Reg_Request(_MBX_MASTER *pMaster, uint8_t SlaveID, uint16_t StartAddr, uint16_t ReadNum); The MBX master issues a read input register request. Parameters pMaster: Pointer to the MBX master object that is expected to issue the request. SlaveID: The ID of the slave to be requested. StartAddr: The starting address for reading. ReadNum: The number of coils to read. Return Value MBX_API_RETURN_DEFAULT(0x00): Normal return. MBX_API_RETURN_BUFFER_FULL(0x20): Queue is full. MBX_API_RETURN_MAP_UNFIND(0x102): Suitable MAP not found, usually means the slave ID is incorrect or the requested address is not defined in the address mapping table. MBx_Master_Write_Coil_Request uint32_t MBx_Master_Write_Coil_Request(_MBX_MASTER *pMaster, uint8_t SlaveID, uint16_t Addr, uint16_t Value); The MBX master issues a write single coil request. Parameters pMaster: Pointer to the MBX master object that is expected to issue the request. SlaveID: The ID of the slave to be requested. Addr: The address to write to. Value: The value to write. For coils, the value is essentially either 0 or greater than 0; the program will automatically handle the formatting of the request. Return Value MBX_API_RETURN_DEFAULT(0x00): Normal return. MBX_API_RETURN_BUFFER_FULL(0x20): Queue is full. MBX_API_RETURN_MAP_UNFIND(0x102): Suitable MAP not found, usually means the slave ID is incorrect or the requested address is not defined in the address mapping table. MBx_Master_Write_Reg_Request uint32_t MBx_Master_Write_Reg_Request(_MBX_MASTER *pMaster, uint8_t SlaveID, uint16_t Addr, uint16_t Value); The MBX master issues a write single holding register request. Parameters pMaster: Pointer to the MBX master object that is expected to issue the request. SlaveID: The ID of the slave to be requested. Addr: The address to write to. Value: The value to write. Return Value MBX_API_RETURN_DEFAULT(0x00): Normal return. MBX_API_RETURN_BUFFER_FULL(0x20): Queue is full. MBX_API_RETURN_MAP_UNFIND(0x102): Suitable MAP not found, usually means the slave ID is incorrect or the requested address is not defined in the address mapping table. MBx_Master_Write_Coil_Mul_Request uint32_t MBx_Master_Write_Coil_Mul_Request(_MBX_MASTER *pMaster, uint8_t SlaveID, uint16_t StartAddr, uint16_t WriteNum, uint8_t *Data, uint16_t DataLen); The MBX master issues a write multiple coils request. The parameters Data and DataLen need to be formatted by the user. See the section on\"(0x0F)ÂÜôÂ§ö‰∏™Á∫øÂúàÁöÑÊ†ºÂºè \"for details. Introduction to Modbus Protocol) Parameters pMaster: Pointer to the MBX master object that is expected to issue the request. SlaveID: The ID of the slave to be requested. StartAddr: The starting address for writing. WriteNum: The number of coils to write. Data: Pointer to the start of the data to write. DataLen: Length of the data to write [in bytes]. Return Value MBX_API_RETURN_DEFAULT(0x00): Normal return. MBX_API_RETURN_BUFFER_FULL(0x20): Queue is full. MBX_API_RETURN_MAP_UNFIND(0x102): Suitable MAP not found, usually means the slave ID is incorrect or the requested address is not defined in the address mapping table. MBx_Master_Write_Reg_Mul_Request uint32_t MBx_Master_Write_Reg_Mul_Request(_MBX_MASTER *pMaster, uint8_t SlaveID, uint16_t StartAddr, uint16_t WriteNum, uint8_t *Data, uint16_t DataLen); The MBX master issues a write multiple holding registers request. Parameters pMaster: Pointer to the MBX master object that is expected to issue the request. SlaveID: The ID of the slave to be requested. StartAddr: The starting address for writing. WriteNum: The number of coils to write. Data: Pointer to the start of the data to write. DataLen: Length of the data to write [in bytes]. Return Value MBX_API_RETURN_DEFAULT(0x00): Normal return. MBX_API_RETURN_BUFFER_FULL(0x20): Queue is full. MBX_API_RETURN_MAP_UNFIND(0x102): Suitable MAP not found, usually means the slave ID is incorrect or the requested address is not defined in the address mapping table. Copyright &yono 2024 all right reservedÔºåpowered by GitbookDate of revision: 2024-11-20 07:06:49 "},"top/ÂÆûÁî®ÂäüËÉΩ.html":{"url":"top/ÂÆûÁî®ÂäüËÉΩ.html","title":"utility","keywords":"","body":"utility User Configuration File Copyright &yono 2024 all right reservedÔºåpowered by GitbookDate of revision: 2024-11-20 07:06:49 "},"apidoc/tools/Áî®Êà∑ÈÖçÁΩÆÊñá‰ª∂.html":{"url":"apidoc/tools/Áî®Êà∑ÈÖçÁΩÆÊñá‰ª∂.html","title":"User Configuration File","keywords":"","body":"User Configuration File The customization and configuration of the protocol stack should be an easy task to control the resource usage of the software package. In the common/include directory, there is a file named MBx_user_sample.h. Copy this file and rename it to MBx_user.h, and add it to a path that can be included. In the global compilation define, add MBX_INCLUDE_USER_DEFINE_FILE. This way, the library will use the custom definitions from MBx_user.h instead of the defaults. Since the configuration file complies with CMSIS Configuration Wizard AnnotationsÔºå, you can use the vscode plugin or other methods to render the configuration in MBx_user.h, allowing for a more intuitive configuration. The recommended method is to use the Arm CMSIS Solution plugin for vscode. Once installed, open the MBx_user.h file and click the \"Open Preview\" icon in the upper right corner to render the configuration file for graphical configuration. Copyright &yono 2024 all right reservedÔºåpowered by GitbookDate of revision: 2024-11-20 07:06:49 "}}