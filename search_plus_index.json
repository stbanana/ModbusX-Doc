{"./":{"url":"./","title":"规范","keywords":"","body":"规范 文档排版符合 中文文案排版指北 (github.com) 开源协议符合 MIT License (mit-license.org) 实现 MODBUS 协议库符合 MODBUS Application Protocol 1 1 b 配置文件符合 CMSIS Configuration Wizard Annotations Copyright &yono 2024 all right reserved，powered by Gitbook文件修订时间： 2024-09-29 03:00:15 "},"overview/特性.html":{"url":"overview/特性.html","title":"库特性","keywords":"","body":"库特性 ⚡不阻塞：使用库 tick，禁止阻塞 🪶不占线程：单 tick 驱动整个主从链，以任何方式周期运行 tick 🌠不占中断：自由的 port 绑定，以任意方式管理数据流 💪多主多从：任何主机或从机都是独立对象，可在程序中开启任意多个主从机 🗽寄存器地址表与内存地址任意映射：本库的重要特性，解决 modbus 虚拟地址与实际变量之间的映射关系，使得开发更为简单且自由，整个库的使用完全围绕这个映射表展开，未来的维护同样只需维护映射表。 ⚖️不同的地址映射查找时间，相差应当不超过 500 个时钟周期：很难说是实现了，由于 modbus 最多也就 0xFFFF 个虚拟地址，所以采用了二分法查找，但这样还是不够自由便利，未来会找到更好的表查找结构(或许)。这是库升级的难点，有方案的请与我联系，非常感谢😘！ 🏃‍♀️克制的事件回调：少量的回调机制。尽可能使用栈轮询，尽可能少地影响系统时序。 Copyright &yono 2024 all right reserved，powered by Gitbook文件修订时间： 2024-09-29 03:00:15 "},"top/通用常用API.html":{"url":"top/通用常用API.html","title":"通用常用API","keywords":"","body":"通用常用API MBx_Ticks Copyright &yono 2024 all right reserved，powered by Gitbook文件修订时间： 2024-09-29 03:00:15 "},"apidoc/apigengric/MBx_Ticks.html":{"url":"apidoc/apigengric/MBx_Ticks.html","title":"MBx_Ticks","keywords":"","body":"MBx_Ticks void MBx_Ticks( uint32_t Cycle ); 必须周期调用, 驱动modbusX系统的关键函数。无论主机还是从机，均由这个唯一的库tick进行驱动。 传参 Cycle：调用本函数的周期值us 返回值 无返回 Copyright &yono 2024 all right reserved，powered by Gitbook文件修订时间： 2024-09-29 03:00:15 "},"top/从机常用API.html":{"url":"top/从机常用API.html","title":"从机常用API","keywords":"","body":"从机常用API MBx_Slave_RTU_Init MBx_Slave_TCP_Init Copyright &yono 2024 all right reserved，powered by Gitbook文件修订时间： 2024-09-29 03:00:15 "},"apidoc/apislave/MBx_Slave_RTU_Init.html":{"url":"apidoc/apislave/MBx_Slave_RTU_Init.html","title":"MBx_Slave_RTU_Init","keywords":"","body":"MBx_Slave_RTU_Init uint32_t MBx_Slave_RTU_Init(_MBX_SLAVE *MBxSlave, uint8_t SlaveID, const _MBX_MAP_LIST_ENTRY *MAP, MBX_SEND_PTR MBxSend, MBX_GTEC_PTR MBxGetc, uint32_t BaudRate, uint8_t *RxBuffer, uint32_t RxBufferSize, uint8_t *TxBuffer, uint32_t TxBufferSize ); 作为 RTU 初始化 MBX 从机对象，并传入各种配置参数对这个 _MBX_SLAVE 类型从机对象进行初始化。 传参 MBxSlave：期望初始化的从机对象指针。 SlaveID：该从机对象配置为的从机 ID ，范围 1~247 。 MAP：该头指针指向以 MBX_MAP_LIST_END 宏为结尾的 list 表。定义所有可能的地址。 MBxSend：另实现的数据发送 port ，是一个函数指针。 MBxGetc：另实现的数据接收port，是一个函数指针。 BaudRate：实际串行链路的波特率，用于自动计算 1.5 字符和 3.5 字符时间。 RxBuffer：用于存放接收数据的一段内存空间头指针。 RxBufferSize：用于存放接收数据的内存空间总长度。这个内存空间决定了解析单条请求的最大长度。 TxBuffer：用于存放发送数据的一段内存空间头指针。 TxBufferSize：用于存放发送数据的内存空间总长度。这个内存空间决定了发送单条回复的最大长度。 返回值 MBX_API_RETURN_DEFAULT(0x00)：正常返回 MBX_API_RETURN_MAP_UNFORMAT(0x101)：传入的MAP表不规范 Copyright &yono 2024 all right reserved，powered by Gitbook文件修订时间： 2024-09-29 03:00:15 "},"apidoc/apislave/MBx_Slave_TCP_Init.html":{"url":"apidoc/apislave/MBx_Slave_TCP_Init.html","title":"MBx_Slave_TCP_Init","keywords":"","body":"Copyright &yono 2024 all right reserved，powered by Gitbook文件修订时间： 2024-09-29 03:00:15 "},"top/主机常用API.html":{"url":"top/主机常用API.html","title":"主机常用API","keywords":"","body":"主机常用API MBx_Master_RTU_Init MBx_Master_Member_Add MBx_Master_Error_Get 对从机发起请求 系列API Copyright &yono 2024 all right reserved，powered by Gitbook文件修订时间： 2024-09-29 03:00:15 "},"apidoc/apimaster/MBx_Master_RTU_Init.html":{"url":"apidoc/apimaster/MBx_Master_RTU_Init.html","title":"MBx_Master_RTU_Init","keywords":"","body":"MBx_Master_RTU_Init uint32_t MBx_Master_RTU_Init(_MBX_MASTER *MBxMaster, MBX_SEND_PTR MBxSend, MBX_GTEC_PTR MBxGetc, uint32_t BaudRate, uint8_t *RxBuffer, uint32_t RxBufferSize, uint8_t *TxBuffer, uint32_t TxBufferSize ); 作为 RTU 初始化 MBX 主机对象，并传入各种配置参数对这个 _MBX_MASTER 类型主机对象进行初始化。 传参 MBxSlave：期望初始化的主机对象指针。 MBxSend：另实现的数据发送 port ，是一个函数指针。 MBxGetc：另实现的数据接收port，是一个函数指针。 BaudRate：实际串行链路的波特率，用于自动计算 1.5 字符和 3.5 字符时间。 RxBuffer：用于存放接收数据的一段内存空间头指针。 RxBufferSize：用于存放接收数据的内存空间总长度。这个内存空间决定了解析单条从机回复的最大长度。 TxBuffer：用于存放发送数据的一段内存空间头指针。 TxBufferSize：用于存放发送数据的内存空间总长度。这个内存空间决定了发送单条主机请求的最大长度。 返回值 MBX_API_RETURN_DEFAULT(0x00)：正常返回 MBX_API_RETURN_ERR_PARAM(0x02)：传参异常，检查调用时的传参。 Copyright &yono 2024 all right reserved，powered by Gitbook文件修订时间： 2024-09-29 03:00:15 "},"apidoc/apimaster/MBx_Master_Member_Add.html":{"url":"apidoc/apimaster/MBx_Master_Member_Add.html","title":"MBx_Master_Member_Add","keywords":"","body":"MBx_Master_Member_Add uint32_t MBx_Master_Member_Add(_MBX_MASTER *MBxMaster, _MBX_MASTER_TEAM_MEMBER *MBxMember, uint8_t SlaveID, const _MBX_MAP_LIST_ENTRY *MAP ); 向 MBX 主机对象添加一个成员从机 传参 MBxMaster：期望添加到的MBX主机对象指针 MBxMember：期望配置并添加进的从机成员对象指针 SlaveID：从机 ID 。将配置给从机成员 MAP：该头指针指向以 MBX_MAP_LIST_END 宏为结尾的 list 表。定义所有可能的地址。将配置给从机成员。 返回值 MBX_API_RETURN_DEFAULT(0x00)：正常返回 MBX_API_RETURN_ERR_PARAM(0x02)：传参异常，检查调用时的传参。 MBX_API_RETURN_MAP_UNFORMAT(0x101)：传入的MAP表不规范 Copyright &yono 2024 all right reserved，powered by Gitbook文件修订时间： 2024-09-29 03:00:15 "},"apidoc/apimaster/MBx_Master_Error_Get.html":{"url":"apidoc/apimaster/MBx_Master_Error_Get.html","title":"MBx_Master_Error_Get","keywords":"","body":"MBx_Master_Error_Get uint32_t MBx_Master_Error_Get(_MBX_MASTER *pMaster, uint8_t *Func, uint8_t *Error, uint16_t *AddrStart, uint16_t *RegNum ); 从 MBX 主机错误队列中获得一个错误，这个错误是接收到的从机错误码。 传参 MBxMaster：期望操作的MBX主机对象指针。 Func：该错误指令，发送时功能码。 Error：实际收到的错误码。 AddrStart：该错误指令，发送时操作的起始地址。 RegNum：该错误指令，发送时操作的寄存器数量。 返回值 MBX_API_RETURN_DEFAULT(0x00)：正常返回。 MBX_API_RETURN_BUFFER_EMPTY(0x21)：队列为空。 Copyright &yono 2024 all right reserved，powered by Gitbook文件修订时间： 2024-09-29 03:00:15 "},"apidoc/apimaster/Master2Slave.html":{"url":"apidoc/apimaster/Master2Slave.html","title":"对从机发起请求 系列API","keywords":"","body":"对从机发起请求 系列API MBx_Master_Read_Coil_Request uint32_t MBx_Master_Read_Coil_Request(_MBX_MASTER *pMaster, uint8_t SlaveID, uint16_t StartAddr, uint16_t ReadNum); MBX 主机发出一条读线圈请求 传参 MBxMaster：期望发出请求的MBX主机对象指针。 SlaveID：期望请求的从机号。 StartAddr：读取起始地址。 ReadNum：读取数量。 返回值 MBX_API_RETURN_DEFAULT(0x00)：正常返回。 MBX_API_RETURN_BUFFER_FULL(0x20)：队列已满。 MBX_API_RETURN_MAP_UNFIND(0x102)：未查找到合适的MAP，通常意味着从机号错误、或请求地址在地址映射表中未定义。 MBx_Master_Read_Disc_Input_Request uint32_t MBx_Master_Read_Disc_Input_Request(_MBX_MASTER *pMaster, uint8_t SlaveID, uint16_t StartAddr, uint16_t ReadNum); MBX 主机发出一条读离散输入请求 传参 MBxMaster：期望发出请求的MBX主机对象指针。 SlaveID：期望请求的从机号。 StartAddr：读取起始地址。 ReadNum：读取数量。 返回值 MBX_API_RETURN_DEFAULT(0x00)：正常返回。 MBX_API_RETURN_BUFFER_FULL(0x20)：队列已满。 MBX_API_RETURN_MAP_UNFIND(0x102)：未查找到合适的MAP，通常意味着从机号错误、或请求地址在地址映射表中未定义。 MBx_Master_Read_Reg_Request uint32_t MBx_Master_Read_Reg_Request(_MBX_MASTER *pMaster, uint8_t SlaveID, uint16_t StartAddr, uint16_t ReadNum); MBX 主机发出一条读保持寄存器请求 传参 MBxMaster：期望发出请求的MBX主机对象指针。 SlaveID：期望请求的从机号。 StartAddr：读取起始地址。 ReadNum：读取数量。 返回值 MBX_API_RETURN_DEFAULT(0x00)：正常返回。 MBX_API_RETURN_BUFFER_FULL(0x20)：队列已满。 MBX_API_RETURN_MAP_UNFIND(0x102)：未查找到合适的MAP，通常意味着从机号错误、或请求地址在地址映射表中未定义。 MBx_Master_Read_Input_Reg_Request uint32_t MBx_Master_Read_Input_Reg_Request(_MBX_MASTER *pMaster, uint8_t SlaveID, uint16_t StartAddr, uint16_t ReadNum); MBX 主机发出一条读输入寄存器请求 传参 MBxMaster：期望发出请求的MBX主机对象指针。 SlaveID：期望请求的从机号。 StartAddr：读取起始地址。 ReadNum：读取数量。 返回值 MBX_API_RETURN_DEFAULT(0x00)：正常返回。 MBX_API_RETURN_BUFFER_FULL(0x20)：队列已满。 MBX_API_RETURN_MAP_UNFIND(0x102)：未查找到合适的MAP，通常意味着从机号错误、或请求地址在地址映射表中未定义。 MBx_Master_Write_Coil_Request uint32_t MBx_Master_Write_Coil_Request(_MBX_MASTER *pMaster, uint8_t SlaveID, uint16_t Addr, uint16_t Value); MBX 主机发出一条写单个线圈请求 传参 MBxMaster：期望发出请求的MBX主机对象指针。 SlaveID：期望请求的从机号。 Addr：写入地址。 Value：写入值。写入线圈，本质上只有0与大于0，程序会自动处理格式化请求。 返回值 MBX_API_RETURN_DEFAULT(0x00)：正常返回。 MBX_API_RETURN_BUFFER_FULL(0x20)：队列已满。 MBX_API_RETURN_MAP_UNFIND(0x102)：未查找到合适的MAP，通常意味着从机号错误、或请求地址在地址映射表中未定义。 MBx_Master_Write_Reg_Request uint32_t MBx_Master_Write_Reg_Request(_MBX_MASTER *pMaster, uint8_t SlaveID, uint16_t Addr, uint16_t Value); MBX 主机发出一条写单个保持寄存器请求 传参 MBxMaster：期望发出请求的MBX主机对象指针。 SlaveID：期望请求的从机号。 Addr：写入地址。 Value：写入值。 返回值 MBX_API_RETURN_DEFAULT(0x00)：正常返回。 MBX_API_RETURN_BUFFER_FULL(0x20)：队列已满。 MBX_API_RETURN_MAP_UNFIND(0x102)：未查找到合适的MAP，通常意味着从机号错误、或请求地址在地址映射表中未定义。 MBx_Master_Write_Coil_Mul_Request uint32_t MBx_Master_Write_Coil_Mul_Request(_MBX_MASTER *pMaster, uint8_t SlaveID, uint16_t StartAddr, uint16_t WriteNum, uint8_t *Data, uint16_t DataLen); MBX 主机发出一条写多个线圈请求 ，Data、DataLen传参需要自行格式化 见其中关于\"(0x0F)写多个线圈的格式 \" modbus协议介绍 ) 传参 MBxMaster：期望发出请求的MBX主机对象指针。 SlaveID：期望请求的从机号。 StartAddr：写入起始地址。 WriteNum：写入数量。 Data：写入数据起始指针。 DataLen：写入数据长度[字节数]。 返回值 MBX_API_RETURN_DEFAULT(0x00)：正常返回。 MBX_API_RETURN_BUFFER_FULL(0x20)：队列已满。 MBX_API_RETURN_MAP_UNFIND(0x102)：未查找到合适的MAP，通常意味着从机号错误、或请求地址在地址映射表中未定义。 MBx_Master_Write_Reg_Mul_Request uint32_t MBx_Master_Write_Reg_Mul_Request(_MBX_MASTER *pMaster, uint8_t SlaveID, uint16_t StartAddr, uint16_t WriteNum, uint8_t *Data, uint16_t DataLen); MBX 主机发出一条写多个保持寄存器请求 传参 MBxMaster：期望发出请求的MBX主机对象指针。 SlaveID：期望请求的从机号。 StartAddr：写入起始地址。 WriteNum：写入数量。 Data：写入数据起始指针。 DataLen：写入数据长度[字节数]。 返回值 MBX_API_RETURN_DEFAULT(0x00)：正常返回。 MBX_API_RETURN_BUFFER_FULL(0x20)：队列已满。 MBX_API_RETURN_MAP_UNFIND(0x102)：未查找到合适的MAP，通常意味着从机号错误、或请求地址在地址映射表中未定义。 Copyright &yono 2024 all right reserved，powered by Gitbook文件修订时间： 2024-09-29 03:00:15 "}}